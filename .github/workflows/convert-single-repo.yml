name: Convert Single Repository

on:
  push:
    branches: 
      - 'repos/*'
  pull_request:
    branches:
      - main
    paths:
      - 'repos/**'
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name to convert (e.g., fastapi, nextjs)'
        required: true
        type: string

jobs:
  detect-repo:
    name: Detect Repository
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.detect.outputs.repo_name }}
      repo_config: ${{ steps.detect.outputs.repo_config }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Detect repository from branch or changes
        id: detect
        run: |
          # Priority 1: Manual workflow dispatch
          if [ -n "${{ github.event.inputs.repo_name }}" ]; then
            REPO_NAME="${{ github.event.inputs.repo_name }}"
            echo "Using manually specified repo: $REPO_NAME"
          # Priority 2: Branch name (repos/xxx)
          elif [[ "${{ github.ref }}" =~ ^refs/heads/repos/(.+)$ ]]; then
            REPO_NAME="${BASH_REMATCH[1]}"
            echo "Detected repo from branch: $REPO_NAME"
          # Priority 3: PR changes detection
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get changed files in PR
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^repos/' || true)
            if [ -n "$CHANGED_FILES" ]; then
              # Extract repo name from first changed file
              REPO_NAME=$(echo "$CHANGED_FILES" | head -1 | cut -d'/' -f2)
              echo "Detected repo from PR changes: $REPO_NAME"
            fi
          fi
          
          # Validate repo exists
          if [ -z "$REPO_NAME" ]; then
            echo "❌ Could not detect repository name"
            exit 1
          fi
          
          if [ ! -d "repos/$REPO_NAME" ]; then
            echo "❌ Repository directory not found: repos/$REPO_NAME"
            exit 1
          fi
          
          if [ ! -f "repos/$REPO_NAME/meta.json" ]; then
            echo "❌ meta.json not found for: $REPO_NAME"
            exit 1
          fi
          
          # Read repo configuration
          REPO_CONFIG=$(cat "repos/$REPO_NAME/meta.json")
          
          echo "repo_name=$REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "repo_config<<EOF" >> "$GITHUB_OUTPUT"
          echo "$REPO_CONFIG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "✅ Will build: $REPO_NAME"

  convert:
    needs: detect-repo
    if: needs.detect-repo.outputs.repo_name != ''
    name: Convert ${{ needs.detect-repo.outputs.repo_name }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout mdx2md
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            mdx2md/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('mdx2md/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
          
      - name: Install dependencies
        run: |
          cd mdx2md
          bun install
          
      - name: Parse repository config
        id: parse
        run: |
          echo '${{ needs.detect-repo.outputs.repo_config }}' > /tmp/repo-config.json
          
          URL=$(jq -r '.url' /tmp/repo-config.json)
          BRANCH=$(jq -r '.branch' /tmp/repo-config.json)
          DOCS_PATH=$(jq -r '.docsPath' /tmp/repo-config.json)
          OUTPUT_PATH=$(jq -r '.outputPath' /tmp/repo-config.json)
          PRESET=$(jq -r '.preset' /tmp/repo-config.json)
          CONFIG_FILE=$(jq -r '.configFile // "null"' /tmp/repo-config.json)
          
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "docs_path=$DOCS_PATH" >> "$GITHUB_OUTPUT"
          echo "output_path=$OUTPUT_PATH" >> "$GITHUB_OUTPUT"
          echo "preset=$PRESET" >> "$GITHUB_OUTPUT"
          echo "config_file=$CONFIG_FILE" >> "$GITHUB_OUTPUT"
          
          echo "Repository: ${{ needs.detect-repo.outputs.repo_name }}"
          echo "URL: $URL"
          echo "Branch: $BRANCH"
          echo "Docs Path: $DOCS_PATH"
          echo "Preset: $PRESET"
        
      - name: Clone target repository
        run: |
          git clone --depth 1 -b ${{ steps.parse.outputs.branch }} \
            ${{ steps.parse.outputs.url }} /tmp/target-repo
          
      - name: Convert ${{ needs.detect-repo.outputs.repo_name }}
        run: |
          cd mdx2md
          REPO_NAME="${{ needs.detect-repo.outputs.repo_name }}"
          
          # Check if custom config file exists
          if [ "${{ steps.parse.outputs.config_file }}" != "null" ] && \
             [ -f "../repos/$REPO_NAME/${{ steps.parse.outputs.config_file }}" ]; then
            echo "Using custom config: repos/$REPO_NAME/${{ steps.parse.outputs.config_file }}"
            bun src/cli.ts convert \
              --repo-file ../repos/$REPO_NAME/${{ steps.parse.outputs.config_file }} \
              --clone-path /tmp/target-repo
          else
            echo "Using meta.json: repos/$REPO_NAME/meta.json"
            bun src/cli.ts convert \
              --repo-file ../repos/$REPO_NAME/meta.json \
              --clone-path /tmp/target-repo
          fi
          
      - name: Prepare artifacts
        run: |
          REPO_NAME="${{ needs.detect-repo.outputs.repo_name }}"
          
          echo "### 📦 Build Output Structure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if output exists in mdx2md directory
          if [ -d "mdx2md/output" ]; then
            echo "Found output at mdx2md/output" >> $GITHUB_STEP_SUMMARY
            mv mdx2md/output ./output
          fi
          
          # Check for repo-specific output
          if [ -d "output/$REPO_NAME" ]; then
            echo "✅ Output found at: output/$REPO_NAME" >> $GITHUB_STEP_SUMMARY
            FILE_COUNT=$(find output/$REPO_NAME -name '*.md' | wc -l)
            echo "📄 Converted files: $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
            
            # Show directory structure (first 20 files)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Directory Structure (first 20 files):" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find output/$REPO_NAME -name '*.md' | head -20 | sed 's|output/'"$REPO_NAME"'/||' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          elif [ -d "output/default" ]; then
            echo "Found output/default - moving to output/$REPO_NAME" >> $GITHUB_STEP_SUMMARY
            mv output/default output/$REPO_NAME
          else
            echo "⚠️ No output found for $REPO_NAME" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.detect-repo.outputs.repo_name }}-markdown
          path: output/${{ needs.detect-repo.outputs.repo_name }}
          retention-days: 30
          if-no-files-found: warn
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const repoName = '${{ needs.detect-repo.outputs.repo_name }}';
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const comment = `## 🚀 Documentation Conversion Complete
            
            **Repository:** \`${repoName}\`
            **Status:** ✅ Success
            
            The documentation has been successfully converted. You can download the artifacts from the [workflow run](${runUrl}).
            
            ---
            _This comment was automatically generated by the documentation conversion workflow._`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });