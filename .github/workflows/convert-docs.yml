name: Convert Documentation (Dynamic)

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'repos/**'
      - 'mdx2md/src/**'
      - '.github/workflows/convert-docs.yml'

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            mdx2md/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('mdx2md/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
          
      - name: Install dependencies
        run: |
          cd mdx2md
          bun install
        
      - id: generate
        name: Generate matrix from repos/
        run: |
          # Generate matrix JSON from repos/meta.json
          matrix=$(bun scripts/generate-matrix.js)
          echo "matrix=${matrix}" >> "$GITHUB_OUTPUT"
          echo "Generated matrix for $(echo $matrix | jq '.repo | length') repositories"

  convert:
    needs: generate-matrix
    name: Convert ${{ matrix.repo.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      
    steps:
      - name: Checkout mdx2md
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            mdx2md/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('mdx2md/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
          
      - name: Install dependencies
        run: |
          cd mdx2md
          bun install
        
      - name: Clone target repository
        run: |
          git clone --depth 1 -b ${{ matrix.repo.branch }} ${{ matrix.repo.url }} /tmp/target-repo
          
      - name: Convert ${{ matrix.repo.name }}
        run: |
          cd mdx2md
          if [ "${{ matrix.repo.file }}" != "null" ]; then
            bun src/cli.ts convert --repo-file ../${{ matrix.repo.file }} --clone-path /tmp/target-repo
          else
            # Use the repo's meta.json directly
            bun src/cli.ts convert --repo-file ../repos/${{ matrix.repo.name }}/meta.json --clone-path /tmp/target-repo
          fi
          
      - name: Prepare artifacts
        run: |
          # Debug: Check where we are and what output exists
          echo "Current directory: $(pwd)"
          echo "Checking for output directories..."
          
          # Check if output exists in mdx2md directory
          if [ -d "mdx2md/output" ]; then
            echo "Found output directory at mdx2md/output:"
            ls -la mdx2md/output/
            
            # Move output to repository root
            mv mdx2md/output ./output
          fi
          
          # Check if output exists at repository root
          if [ -d "output" ]; then
            echo "Found output directory at repository root:"
            ls -la output/
            
            # Check for the specific repo directory
            if [ -d "output/${{ matrix.repo.name }}" ]; then
              echo "✓ Found output/${{ matrix.repo.name }}"
            elif [ -d "output/default" ]; then
              echo "Found output/default - moving to output/${{ matrix.repo.name }}"
              mv output/default output/${{ matrix.repo.name }}
            fi
          fi
          
          # Final check
          if [ -d "output/${{ matrix.repo.name }}" ]; then
            echo "✓ Output ready at: output/${{ matrix.repo.name }}"
            echo "File count: $(find output/${{ matrix.repo.name }} -name '*.md' | wc -l)"
          else
            echo "⚠️ No output found for ${{ matrix.repo.name }}"
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repo.name }}-markdown
          path: output/${{ matrix.repo.name }}
          retention-days: 30
          if-no-files-found: warn
          
      - name: Summary
        if: always()
        run: |
          echo "### 📚 ${{ matrix.repo.name }}" >> $GITHUB_STEP_SUMMARY
          if [ -d "output/${{ matrix.repo.name }}" ]; then
            count=$(find "output/${{ matrix.repo.name }}" -name "*.md" | wc -l)
            echo "✅ Converted ${count} files" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Conversion failed or no output found" >> $GITHUB_STEP_SUMMARY
          fi